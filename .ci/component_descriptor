#!/usr/bin/env python3

import dataclasses
import hashlib
import logging
import os
import tarfile
import tempfile
import yaml

import ccc.oci
import ci.util
import cnudie.util
import gci.componentmodel as cm

logger = logging.getLogger(__name__)

component_descriptor_base_path = os.path.abspath(ci.util.check_env('BASE_DEFINITION_PATH'))
component_descriptor_path = os.path.abspath(ci.util.check_env('COMPONENT_DESCRIPTOR_PATH'))
component_version = ci.util.check_env('COMPONENT_VERSION')

own_dir = os.path.abspath(os.path.dirname(__file__))
repo_dir = os.path.abspath(os.path.join(own_dir, os.pardir))

delivery_service_versionfile = os.path.join(repo_dir, 'DELIVERY_SERVICE_VERSION')
delivery_dashboard_versionfile = os.path.join(repo_dir, 'DELIVERY_DASHBOARD_VERSION')

installation_dir = os.path.join(repo_dir, 'installation')


def component_version_from_file(file_path: str):
    with open(file_path) as version_file:
        version = version_file.read().strip()
    return version


def parse_component_descriptor():
    component_descriptor = cm.ComponentDescriptor.from_dict(
        ci.util.parse_yaml_file(component_descriptor_base_path)
    )
    return component_descriptor


def add_component_ref(
    component: cm.Component,
    component_ref: cm.ComponentReference,
):
    component.componentReferences.append(component_ref)


def add_installation_resource(
    component: cm.Component,
):
    mimetype = 'application/tar+gzip'

    file = tempfile.TemporaryFile()
    with tarfile.open(fileobj=file, mode='w:gz') as tar:
        tar.add(
            name=installation_dir,
            arcname=os.path.basename(installation_dir),
        )

    hash = hashlib.sha256()
    file.seek(0)
    while (buf := file.read(4096)):
        hash.update(buf)
    digest = f'sha256:{hash.hexdigest()}'
    octets = file.tell()
    file.seek(0)

    target_ref = cnudie.util.target_oci_ref(component=component)
    logger.info(f'pushing blob for installation script with {digest=} to {target_ref=}')

    client = ccc.oci.oci_client()
    client.put_blob(
        image_reference=target_ref,
        digest=digest,
        octets_count=octets,
        data=file,
        mimetype=mimetype,
    )

    component.resources.append(
        cm.Resource(
            name='installation',
            version=component_version,
            type='directoryTree',
            access=cm.LocalBlobAccess(
              mediaType=mimetype,
              localReference=digest,
              size=octets,
            ),
        ),
    )


def main():
    delivery_service_version = component_version_from_file(delivery_service_versionfile)
    delivery_dashboard_version = component_version_from_file(delivery_dashboard_versionfile)

    component_descriptor = parse_component_descriptor()
    component = component_descriptor.component

    add_component_ref(
        component=component,
        component_ref=cm.ComponentReference(
            name='delivery-dashboard',
            componentName='ocm.software/ocm-gear/delivery-dashboard',
            version=delivery_dashboard_version,
            labels=[],
        )
    )

    add_component_ref(
        component=component,
        component_ref=cm.ComponentReference(
            name='delivery-service',
            componentName='ocm.software/ocm-gear/delivery-service',
            version=delivery_service_version,
            labels=[],
        )
    )

    add_installation_resource(
        component=component,
    )

    with open(component_descriptor_path, 'w') as f:
        yaml.dump(
            data=dataclasses.asdict(component_descriptor),
            Dumper=cm.EnumValueYamlDumper,
            stream=f,
        )


if __name__ == '__main__':
    main()
